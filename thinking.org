#+STARTUP: showeverything
* Subsystems
** Rendering
   Using openGL for this. We basically just need to build a "sprite
   interpreter", so to speak, where a "sprite" is just a 2D
   graphical... thing. So we should get a specification for sprites going so
   that we can use them.

   Also, here's the [[https://wiki.libsdl.org/CategoryVideo][SDL video documentation]].
*** Specification
    So what are sprites made up of, and how should they be rendered based on
    that? Let's say that they have a bitmap property which is basically just a
    2-dimensional array of colors, right? And they also should have vector
    information. In general, all vector graphics can be reduced to a
    sufficiently high amount of lines. Now, we'd like to be able to not have to
    spam lines to get complex geometry. So we might want more types of vector
    graphics than just lines. But for now, it is all we will have. 
**** Bitmap graphics part
     A 2-dimensional array of colors and the associated sizes.
**** Vector graphics part
     An array of lines, where a line consists of two points. Lines should also
     have colors.
*** Drawing the sprites
    - Copy bitmap stuff to the framebuffer in the right place (doing
    scaling/rotating if necessary) (bitmap half)
    - Draw lines on top of it (vector stuff)
**** OpenGL
     We could use different shaders for the different kinds of drawing we do. OR
     we can make a decision in the shader. Or we could just have the shader
     always do both of them and assume that drawing 0 lines isn't much work, and
     neither is copying 0 pixels. But it turns out that the best option is
     probably to do the first one (using different shaders for the different
     kinds of drawing), but batch together drawings of the same kind. That is,
     first draw all the bitmap graphics, then switch to the other shader, then
     draw all the vector graphics.
***** To draw a sprite
      Let's batch all of the bitmap graphics together and batch all the vector
      graphics together. 
***** The shaders
      - Vertex :: In the case of vector graphics, we need only pass the
                  information through to the fragment shader, where it will just
                  take the color and make that be the output color. Because the
                  entire line is the same color.

		  In the case of bitmap graphics, the same thing, only it's also
                  passing along texture coordinates. 

	+ Vector :: outPos = inPos
		    outColor = inColor
		    
	+ Bitmap :: outPos = inPos
		    outU = inU
		    outV = inV
 
		  
      - Fragment ::  A fragment shader answers the "what" question of a triangle
                     (namely, what color for each pixel). In the case of vector
                     graphics, this is just the interpolated color of the
                     vertices (which will usually be the same color for both of
                     them). In the case of bitmap graphics, this is the
                     pixel of the texture for that sprite closest to the UV
                     coordinates that have been interpolated.
		     
		     vector: outColor = inColor
		     bitmap: outColor = texture[inU][inV]
      
      To draw a line here, just set the color of the pixel this instance of the
      shader is operating on to the color given. I think OpenGL should handle
      the selecting of the right pixels by itself.
** Physics
*** Collision detection
    The simplest thing that could possibly sort of work: Everything is a box,
    teleport everything to where its velocity and the elapsed time indicate it
    should be, and figure out what stuff is stuck in each other.
*** Actual physics
**** Describing motion
     Forces are instantaneous and applied each physics update, and velocities
     are constant in between updates. Position is incremented by whatever the
     combination of change in time and current velocity indicate it should be. 
**** Collision response
     The simplest form involves stuff hitting each other and sticking (that is,
     not bouncing) and combining the momentums to figure out how fast and in
     what direction they should be going now. Bouncing is hard because figuring
     out the angle of incidence is hard when you don't actually know where or
     when they collided (although it's easier with boxes than with other
     shapes).
** Game logic

* Project organization
  So far we've just got main.c, which has the basic everything loop, a Makefile
  to be used for compiling, and this document that is, as the name implies, for
  thinking. 
* Documentation
  [[https://wiki.libsdl.org][SDL wiki]]
** Building
   If you're on Linux or really any Unix, this should be pretty
   straightforward. Just make sure you have libsdl2-dev or whatever your package
   manager calls it, make, and gcc of course installed. If you're using mingw32,
   you want the msys version of make - the one that comes already installed
   won't work. If you're on windows and want to use anything other than mingw, I
   don't know what you should do, but you're probably smarter than me so you can
   probably figure it out.

* Schedule/TODOs
** NOTE: If you want something immediately visible, put a flush() after it!
   On Windows especially, the buffering of stdout is really obvious - you'd
   think we weren't even getting any events until suddenly the buffer is full
   and gets autoflushed and suddenly we get 200 lines of output. Note that this
   doesn't seem to have the intended effect in Windows - it still only prints
   big chunks at a time.
